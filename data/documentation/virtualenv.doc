===============================================================================
=           P y t h o n   V i r t u a l   E n v i r o n m e n t               =
-------------------------------------------------------------------------------
=                        D O C U M E N T A T I O N                            =
===============================================================================



Introduction:
-------------
    A virtual environment is a tool that helps to keep dependencies
    required by different projects separate by creating isolated python
    virtual environments for them. This is one of the most important
    tools that most of the Python developers use.



Why do we need a virtual environment?
-------------------------------------
    Imagine a scenario where you are working on two web based python
    projects and one of them uses a Flask 1.9 and the other uses Flask
    1.10 and so on. In such situations virtual environment can be really
    useful to maintain dependencies of both the projects.



When and where to use a virtual environment?
--------------------------------------------
    By default, every project on your system will use these same
    directories to store and retrieve site packages (third party
    libraries). How does this matter? Now, in the above example of two
    projects, you have two versions of Flask. This is a real problem for
    Python since it can’t differentiate between versions in the “site-packages”
    directory. So both v1.9 and v1.10 would reside in the same directory with
    the same name. This is where virtual environments come into play.
    To solve this problem, we just need to create two separate
    virtual environments for both the projects.The great thing about this
    is that there are no limits to the number of environments you can
    have since they’re just directories containing a few scripts.
    Virtual Environment should be used whenever you work on any Python
    based project. It is generally good to have one new virtual environment for
    every Python based project you work on. So the dependencies of every
    project are isolated from the system and each other.



How does a virtual environment work?
------------------------------------
    We use a module named virtualenv which is a tool to create isolated
    Python environments. virtualenv creates a folder which contains all
    the necessary executables to use the packages that a Python project would
    need.



===============================================================================
=       C r e a t e   v i r t u a l   e n v i r o n m e n t   u s i n g       =
-------------------------------------------------------------------------------
=                                   V E N V                                   =
===============================================================================


Need of virtual environment:
----------------------------
    Imagine a scenario where a web app is hosted on a cloud hosting service
    provider with a python development environment. The configuration for
    the web app comes with an option for installing the newest version of
    the Flask web framework. Suppose, the web app is created on the local
    system with an older version of the framework and as soon as it is
    uploaded on the site, there will be a version conflict as some of the
    modules used are depreciated in the latest versions of Flask.



Use of virtual environment:
---------------------------
    The above scenario can be solved using virtual environment. Python
    development environments can be separated by making use of some virtual
    environment. A virtual environment, here, is an isolated Python
    installation that allows to manage dependencies and work on separate
    Python projects without affecting other projects. When a virtual
    environment is created, it creates a separate folder from the global Python
    or other virtual environments and copies Python into it along with a
    site-packages folder among a couple of others. For older versions of Python,
    virtual machines require installing a third- party tool called virtualenv.
    It’s been integrated into newer versions of Python3 under the module venv.
    To know more about virtualenv click here.



Implementing venv:
------------------
    First, check whether the pip has the same version of the interpreter as
    that on the system and where the Python environment currently resides:
    To check where the python currently resides type the below command in
    the terminal.

